// Inisialisasi aplikasi Firebase
firebase.initializeApp(firebaseConfig);
// Mengambil referensi Firestore
const db = firebase.firestore();

// Get user details elements
var userfullNameText = document.getElementsByClassName('user-fullname')[0];
var userEmailText = document.getElementsByClassName('user-email')[0];
var userCategoryText = document.getElementsByClassName('user-category')[0];
var userPictureSRC = document.getElementsByClassName('user-pic')[0];
var usernameText = document.getElementsByClassName('username')[0];
var signupTimeText = document.getElementsByClassName('signup-time')[0];
var planExpirationText = document.getElementsByClassName('plan-expiration')[0];
var userBioText = document.getElementsByClassName('user-bio')[0];

// Set user details and login time
firebase.auth().onAuthStateChanged(function(user) {
  if (user) {
    var author = user.displayName; // Menggunakan displayName sebagai nilai author
    var categoryRef = firebase.firestore().collection('users').doc(author);
    categoryRef.get()
      .then(function(doc) {
        if (doc.exists) {

          userfullNameText.textContent = doc.data().firstName + " " + doc.data().lastName;
          userEmailText.textContent = user.email;
          userCategoryText.textContent = doc.data().category;

          // Cek apakah data profile tersedia
          if (doc.data().profile) {
            userPictureSRC.src = doc.data().profile;
          } else {
            userPictureSRC.src = 'https://www.koraa.my.id/assets/img/logo/koraa.png'; // Menggunakan gambar default jika tidak ada data profile
          }

          usernameText.textContent = doc.data().username;
          signupTimeText.textContent = doc.data().signupTime; // Tampilkan waktu pendaftaran
          planExpirationText.textContent = doc.data().planExpiration; // Tampilkan waktu saat ini

          // Cek apakah data bio tersedia
          if (doc.data().bio) {
            userBioText.innerHTML = doc.data().bio;
          } else {
            userBioText.textContent = "Bio tidak tersedia";
          }

          // Panggil fungsi untuk mendapatkan item-item pengguna
          getUserItems(author);
        } else {
          userfullNameText.textContent = "User not logged in";
          userEmailText.textContent = "Email not available";
          userCategoryText.textContent = "Category not available";
          signupTimeText.textContent = "";
          planExpirationText.textContent = "User not logged in";
          userBioText.textContent = "User not logged in";

          // Add click event listener to redirect to login page
          loginTimeText.addEventListener('click', function() {
            window.location.href = '/auth/login/'; // Ganti '/login' dengan URL yang benar untuk halaman login
          });
        }
      })
      .catch(function(error) {
        console.log(error);
      });
  } else {
    userEmailText.textContent = "User not logged in";
    userCategoryText.textContent = "";
    planExpirationText.textContent = "User not logged in";
    signupTimeText.textContent = "User not logged in";
    loginTimeText.textContent = "User not logged in";

    // Add click event listener to redirect to login page
    userEmailText.addEventListener('click', function() {
      window.location.href = '/auth/login/'; // Ganti '/login' dengan URL yang benar untuk halaman login
    });

    signupTimeText.addEventListener('click', function() {
      window.location.href = '/auth/login/'; // Ganti '/login' dengan URL yang benar untuk halaman login
    });

    loginTimeText.addEventListener('click', function() {
      window.location.href = '/auth/login/'; // Ganti '/login' dengan URL yang benar untuk halaman login
    });
  }
});

// Get logout button element
var logoutButton = document.getElementById('logout-button');

// Add event listener to logout button
logoutButton.addEventListener('click', function() {
  firebase.auth().signOut()
    .then(function() {
      // Redirect to the login page after successful logout
      window.location.href = '/auth/login/'; // Ganti '/login' dengan URL yang benar untuk halaman login
    })
    .catch(function(error) {
      console.log(error);
    });
});


// Fungsi untuk mendapatkan item-item pengguna
function getUserItems(author) {
  db.collection(`users/${author}/items`)
    .orderBy("time", "desc")
    .get()
    .then((querySnapshot) => {
      const itemsContainer = document.querySelector(".items-container");
      let html = "";

      querySnapshot.forEach((doc) => {
        const item = doc.data();
        const itemHtml = `
        <div class="col-sm-12">
          <div class="card">
            <div class="profile-post">
              <div class="post-header">
                <div class="d-flex">
                  <img class="img-thumbnail rounded-circle me-3" src="${item.img}" alt="Generic placeholder image">
                  <div class="flex-grow-1 align-self-center">
                    <a href="social-app.html">
                      <h5 class="user-name">${item.name}</h5>
                    </a>
                    <h6 class="f-w-500">${item.time}</h6>
                  </div>
                  <div class="post-setting">
                    <i class="ri-delete-bin-line" onclick="deleteItem('${author}', '${doc.id}')"></i>
                  </div>
                </div>
              </div>
              <div class="post-body">
                <div class="img-container">
                  <div class="my-gallery" itemscope="" data-pswp-uid="1">
                    <figure itemprop="associatedMedia" itemscope="">
                      <img class="img-fluid" src="${item.img}" itemprop="thumbnail" alt="gallery">
                      <figcaption itemprop="caption description">Image caption 1</figcaption>
                    </figure>
                  </div>
                </div>
                <p>${item.description}</p>
                <ul class="post-comment">
                  <li>
                    <label><a href="#">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-heart">
                          <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                        </svg>&nbsp;&nbsp;Like<span class="counter">50</span></a>
                    </label>
                  </li>
                  <li>
                    <label><a href="#">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-message-square">
                          <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                        </svg>&nbsp;&nbsp;Comment<span class="counter">70</span></a>
                    </label>
                  </li>
                  <li>
                    <label><a href="#">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-share">
                          <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
                          <polyline points="16 6 12 2 8 6"></polyline>
                          <line x1="12" y1="2" x2="12" y2="15"></line>
                        </svg>&nbsp;&nbsp;share<span class="counter">20</span></a>
                    </label>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        `;

        html += itemHtml;
      });

      itemsContainer.innerHTML = html;
    })
    .catch((error) => {
      console.log("Error getting items:", error);
    });
}

// Fungsi untuk menghapus item
function deleteItem(author, itemId) {
  // Hapus item dari koleksi 'items'
  db.collection("items")
    .doc(itemId)
    .delete()
    .then(() => {
      console.log("Item successfully deleted from 'koraa/items/<categoryitems>' collection!");

      // Hapus item dari koleksi 'users/<displayName>/items'
      db.collection(`users/${author}/items`)
        .doc(itemId)
        .delete()
        .then(() => {
          console.log("Item successfully deleted from 'users/<displayName>/items' collection!");

          // Hapus item dari HTML
          const itemElement = document.getElementById(itemId);
          if (itemElement) {
            itemElement.remove();
          }
        })
        .catch((error) => {
          console.error("Error deleting item from 'users/<displayName>/items' collection:", error);
        });
    })
    .catch((error) => {
      console.error("Error deleting item from 'koraa/items/<categoryitems>' collection:", error);
    });
}
