// Get the edit profile form element
var editProfileForm = document.getElementById('edit-profile-form');

var overlay = document.getElementById('overlay');
var loader = document.getElementById('loader');

editProfileForm.addEventListener('submit', function (event) {
  event.preventDefault(); // Prevent form submission
  overlay.style.display = 'block';

  var username = document.getElementById('username').value;
  var firstName = document.getElementById('first-name').value;
  var lastName = document.getElementById('last-name').value;
  var occupation = document.getElementById('occupation').value;
  var company = document.getElementById('company').value;
  var location = document.getElementById('location').value;
  var city = document.getElementById('city').value;
  var websiteUrl = document.getElementById('website-url').value;

  var instagram = document.getElementById('instagram').value;
  var tiktok = document.getElementById('tiktok').value;
  var facebook = document.getElementById('facebook').value;
  var twitter = document.getElementById('twitter').value;
  var dribbble = document.getElementById('dribbble').value;
  var pinterest = document.getElementById('pinterest').value;
  var github = document.getElementById('github').value;
  var linkedin = document.getElementById('linkedin').value;
  var telegram = document.getElementById('telegram').value;
  var wordpress = document.getElementById('wordpress').value;

  var bio = document.getElementById('bio').value;
  var birthday = document.getElementById('birthday').value;

  var template = document.getElementById('template').value;
  
  // Check if the username is taken before proceeding with the form submission
  firebase.firestore().collection('users').where('username', '==', username).get()
    .then(function (querySnapshot) {
      var isUsernameTaken = false;
      querySnapshot.forEach(function (doc) {
        if (doc.id !== firebase.auth().currentUser.uid) {
          isUsernameTaken = true;
        }
      });

      if (isUsernameTaken) {
        document.getElementById('username-error').textContent = 'This username is already taken. Please choose a different one.';
        overlay.style.display = 'none';
      } else {
        document.getElementById('username-error').textContent = '';
        isUsernameTaken = false;

        // Update the user profile data in the database
        firebase.auth().onAuthStateChanged(function (user) {
          if (user) {
            var userRef = firebase.firestore().collection('users').doc(user.uid);
            var userItemsRef = firebase.firestore().collection('users').doc(user.uid).collection('items');

            userItemsRef.get()
              .then(function (querySnapshot) {
                var batch = firebase.firestore().batch();

                querySnapshot.forEach(function (doc) {
                  var data = doc.data();
                  batch.update(doc.ref, { author: username });
                  data.author = username;

                  var itemDocRef = firebase.firestore().collection('items').doc(doc.id);
                  batch.update(itemDocRef, data);
                });

                return batch.commit()
                  .then(function () {
                    console.log("Perubahan pada 'items/' berhasil diupdate");
                  })
                  .catch(function (error) {
                    console.error("Gagal melakukan perubahan:", error);
                  });
              })

            var profileImage = document.getElementById('profile-image').files[0];
            var storageRef = firebase.storage().ref().child('profile/' + user.uid);

            if (profileImage) {
              var uploadTask = storageRef.put(profileImage);
              uploadTask.then(function (snapshot) {
                return snapshot.ref.getDownloadURL();
              })
                .then(function (downloadURL) {
                  userRef.update({
                    username: username,
                    firstName: firstName,
                    lastName: lastName,
                    occupation: occupation,
                    company: company,
                    location: location,
                    city: city,
                    websiteUrl: websiteUrl,

                    instagram: instagram,
                    tiktok: tiktok,
                    facebook: facebook,
                    twitter: twitter,
                    dribbble: dribbble,
                    pinterest: pinterest,
                    github: github,
                    linkedin: linkedin,
                    telegram: telegram,
                    wordpress: wordpress,

                    bio: bio,
                    birthday: birthday,
                    profile: downloadURL,

                    template: template
                  })
                    .catch(function (error) {
                      console.log(error);
                      alert('Failed to update profile');
                      overlay.style.display = 'none';
                    });
                })
                .catch(function (error) {
                  console.log(error);
                  alert('Failed to upload profile image');
                  overlay.style.display = 'none';
                });
            } else {
              userRef.update({
                username: username,
                firstName: firstName,
                lastName: lastName,
                occupation: occupation,
                company: company,
                location: location,
                city: city,
                websiteUrl: websiteUrl,

                instagram: instagram,
                tiktok: tiktok,
                facebook: facebook,
                twitter: twitter,
                dribbble: dribbble,
                pinterest: pinterest,
                github: github,
                linkedin: linkedin,
                telegram: telegram,
                wordpress: wordpress,

                bio: bio,
                birthday: birthday,

                template: template
              })
                .then(function () {
                  alert('Profile updated successfully');
                  window.location.href = '/p/profile/';
                  overlay.style.display = 'none';
                })
                .catch(function (error) {
                  console.log(error);
                  alert('Failed to update profile');
                  overlay.style.display = 'none';
                });
            }
          } else {

          }
        });
      }
    })
    .catch(function (error) {
      console.error('Error checking username:', error);
      overlay.style.display = 'none';
    });
});

// Load existing user profile data from Firestore
firebase.auth().onAuthStateChanged(function (user) {
  if (user) {
    overlay.style.display = 'block';
    var userRef = firebase.firestore().collection('users').doc(user.uid);
    userRef.get()
      .then(function (doc) {
        if (doc.exists) {
          overlay.style.display = 'none';
          var usernameInput = document.getElementById('username');
          var firstNameInput = document.getElementById('first-name');
          var lastNameInput = document.getElementById('last-name');
          var occupationInput = document.getElementById('occupation');
          var companyInput = document.getElementById('company');
          var locationInput = document.getElementById('location');
          var cityInput = document.getElementById('city');
          var websiteUrlInput = document.getElementById('website-url');

          var instagramInput = document.getElementById('instagram');
          var tiktokInput = document.getElementById('tiktok');
          var facebookInput = document.getElementById('facebook');
          var twitterInput = document.getElementById('twitter');
          var dribbbleInput = document.getElementById('dribbble');
          var pinterestInput = document.getElementById('pinterest');
          var githubInput = document.getElementById('github');
          var linkedinInput = document.getElementById('linkedin');
          var telegramInput = document.getElementById('telegram');
          var wordpressInput = document.getElementById('wordpress');

          var bioInput = document.getElementById('bio');
          var birthdayInput = document.getElementById('birthday');
          var templateInput = document.getElementById('template');

          var data = doc.data();
          usernameInput.value = data.username || '';

          var userPlan = data.plan || 'free';
          var usernameChanges = data.usernameChanges || 0;

          // Function to handle the username input change event
          function handleUsernameChange() {
            var newUsername = usernameInput.value;
          
            if (userPlan === 'free') {
              usernameInput.value = data.username;
              alert('You cannot change your username with the free plan.');
            } else if (userPlan === 'silver' && usernameChanges >= 3) {
              usernameInput.value = data.username;
              alert('You have used all your username changes with the silver plan.');
            } else if (userPlan === 'business' && usernameChanges >= 10) {
              usernameInput.value = data.username;
              alert('You have used all your username changes with the business plan.');
            } else if (userPlan === 'premium' && usernameChanges >= 'unlimited') {
              usernameInput.value = data.username;
            } else if (newUsername === data.username) {
            } else {
              // Check if the new username is taken before proceeding
              firebase.firestore().collection('users').where('username', '==', newUsername).get()
                .then(function (querySnapshot) {
                  var isUsernameTaken = false;
                  querySnapshot.forEach(function (doc) {
                    // If the username is found and belongs to a different user, mark it as taken
                    if (doc.id !== firebase.auth().currentUser.uid) {
                      isUsernameTaken = true;
                    }
                  });
          
                  if (isUsernameTaken) {
                    alert('This username is already taken. Please choose a different one.');
                    usernameInput.value = data.username;
                  } else {
                    // The new username is unique, proceed with updating the username and incrementing usernameChanges
                    usernameChanges++;
                    userRef.update({ usernameChanges: usernameChanges, username: newUsername })
                      .catch(function (error) {
                        console.log('Error updating username:', error);
                      });
                  }
                })
                .catch(function (error) {
                  console.error('Error checking username:', error);
                  overlay.style.display = 'none';
                });
            }
          }
          
          if (
            userPlan === 'free' ||
            (userPlan === 'silver' && usernameChanges >= 3) ||
            (userPlan === 'business' && usernameChanges >= 10) ||
            (userPlan === 'premium' && usernameChanges >= 'unlimited') ||
            userPlan === 'premium unlimited'
          ) {
            usernameInput.setAttribute('readonly', 'readonly');
          }
          
          // Add event listener to the username input
          usernameInput.addEventListener('change', handleUsernameChange);
    
          firstNameInput.value = data.firstName || '';
          lastNameInput.value = data.lastName || '';
          occupationInput.value = data.occupation || '';
          companyInput.value = data.company || '';
          locationInput.value = data.location || '';
          cityInput.value = data.city || '';
          websiteUrlInput.value = data.websiteUrl || '';

          instagramInput.value = data.instagram || '';
          tiktokInput.value = data.tiktok || '';
          facebookInput.value = data.facebook || '';
          twitterInput.value = data.twitter || '';
          dribbbleInput.value = data.dribbble || '';
          pinterestInput.value = data.pinterest || '';
          githubInput.value = data.github || '';
          linkedinInput.value = data.linkedin || '';
          telegramInput.value = data.telegram || '';
          wordpressInput.value = data.wordpress || '';

          bioInput.value = data.bio || '';
          birthdayInput.value = data.birthday || '';

          templateInput.value = data.template || '';
          var templateSelect = document.getElementById('template');

          // Call the function to set the initial state
          toggleTemplateOption();

          // Now, listen for changes in the user's plan and update the template options accordingly
          userRef.onSnapshot(function (doc) {
            var newData = doc.data();
            var newUserPlan = newData.plan || 'free';
            if (userPlan !== newUserPlan) {
              userPlan = newUserPlan;
              toggleTemplateOption();
            }
          });
          function toggleTemplateOption() {
            var templateOptionV1 = templateSelect.querySelector('option[value="v1"]');
            var templateOptionV2 = templateSelect.querySelector('option[value="v2"]');
            var templateOptionV3 = templateSelect.querySelector('option[value="v3"]');
          
            // Disable all options first
            templateOptionV1.disabled = true;
            templateOptionV2.disabled = true;
            templateOptionV3.disabled = true;
          
            // Enable options based on user's plan
            if (userPlan === 'free') {
              templateOptionV1.disabled = false;
            } else if (userPlan === 'standart') {
              templateOptionV1.disabled = false;
              templateOptionV2.disabled = false;
            } else if (userPlan === 'business') {
              templateOptionV1.disabled = false;
              templateOptionV2.disabled = false;
              templateOptionV3.disabled = false;
            } else if (userPlan === 'premium') {
              templateOptionV1.disabled = false;
              templateOptionV2.disabled = false;
              templateOptionV3.disabled = false;
            }
          }
          
          $("#location").trigger('change');
          $("#template").trigger('change');
          $("#location").trigger('change');

          // Update the 'item-picture' element with the profile picture URL or a default image
          var pictureElement = document.getElementsByClassName('author-profile')[0];
          var pictureURL = data.profile || 'https://www.koraa.my.id/assets/img/logo/koraa.png'; // Default image URL
          pictureElement.src = pictureURL;

          // Update the 'item-username' element with the username
          document.getElementsByClassName('author-name')[0].textContent = data.username || '';
          document.getElementsByClassName('author-category')[0].textContent = data.category || '';
          document.getElementsByClassName('author-bio')[0].innerHTML = data.bio || '';


        }
      })
      .catch(function (error) {
        console.log(error);
      });
  }
});

$(document).ready(function () {
  $("#template").on("change", function () {
    if ($(this).val() === "v1") {
      var link = $("<a>")
        .text("View Template V1")
        .attr("href", "https://www.koraa.my.id/user/?author=demov1")
        .attr("target", "_blank");
      $("a.view-link").remove();
      $(".view").empty().append(link.addClass("view-link"));
    } else if ($(this).val() === "v2") {
      var link = $("<a>")
        .text("View Template V2")
        .attr("href", "https://www.koraa.my.id/user/?author=demov2")
        .attr("target", "_blank");
      $("a.view-link").remove();
      $(".view").empty().append(link.addClass("view-link"));
    } else if ($(this).val() === "v3") {
      var link = $("<a>")
        .text("View Template V3")
        .attr("href", "https://www.koraa.my.id/user/?author=demov3")
        .attr("target", "_blank");
      $("a.view-link").remove();
      $(".view").empty().append(link.addClass("view-link"));
    }
  });
});
